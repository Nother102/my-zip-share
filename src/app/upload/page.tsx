"use client";

import { useState } from "react";
import { useSession } from "next-auth/react";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { FileArchive, Image, User, FileText, Ruler, Upload } from "lucide-react";

export default function UploadPage() {
  const { data: session, status } = useSession();
  const [zipFile, setZipFile] = useState<File | null>(null);
  const [previewImage, setPreviewImage] = useState<File | null>(null);
  const [uploadedBy, setUploadedBy] = useState<string>("");
  const [description, setDescription] = useState<string>("");
  const [size, setSize] = useState<string>("");
  const [statusMsg, setStatusMsg] = useState<string | null>(null);

  if (status === "loading") {
    return <div className="p-6">üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå...</div>;
  }

  if (!session) {
    return (
      <div className="p-6 max-w-xl mx-auto">
        <h1 className="text-xl font-bold mb-4">üö´ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ</h1>
        <Link href="/api/auth/signin">
          <Button>üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google</Button>
        </Link>
      </div>
    );
  }

  const formatFileSize = (bytes: number) => {
    const mb = bytes / (1024 * 1024);
    return `${mb.toFixed(1)} MB`;
  };

  const handleZipChange = (file: File | null) => {
    setZipFile(file);
    if (file) {
      setSize(formatFileSize(file.size));
    } else {
      setSize("");
    }
  };

  const handleUpload = async () => {
    if (!zipFile || !previewImage || !uploadedBy.trim()) {
      setStatusMsg("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    const formData = new FormData();
    formData.append("zip", zipFile);
    formData.append("preview", previewImage);
    formData.append("uploadedBy", uploadedBy);
    formData.append("description", description);
    formData.append("size", size);

    const res = await fetch("/api/upload", {
      method: "POST",
      body: formData
    });

    if (res.ok) {
      setStatusMsg("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      setZipFile(null);
      setPreviewImage(null);
      setUploadedBy("");
      setDescription("");
      setSize("");
    } else {
      setStatusMsg("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    }
  };

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-3xl font-bold mb-6 text-center">üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ZIP</h1>

      <div className="bg-white p-6 rounded-xl shadow space-y-5">
        <div className="space-y-1">
          <label className="font-medium flex items-center gap-2">
            <FileArchive className="w-5 h-5" /> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå .zip
          </label>
          <input
            type="file"
            accept=".zip"
            onChange={(e) => handleZipChange(e.target.files?.[0] || null)}
            className="w-full border p-2 rounded"
          />
        </div>

        <div className="space-y-1">
          <label className="font-medium flex items-center gap-2">
            <Image className="w-5 h-5" /> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ preview (.png)
          </label>
          <input
            type="file"
            accept="image/png"
            onChange={(e) => setPreviewImage(e.target.files?.[0] || null)}
            className="w-full border p-2 rounded"
          />
        </div>

        <div className="space-y-1">
          <label className="font-medium flex items-center gap-2">
            <User className="w-5 h-5" /> ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
          </label>
          <input
            type="text"
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
            className="w-full p-2 border rounded"
            value={uploadedBy}
            onChange={(e) => setUploadedBy(e.target.value)}
          />
        </div>

        <div className="space-y-1">
          <label className="font-medium flex items-center gap-2">
            <FileText className="w-5 h-5" /> ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
          </label>
          <textarea
            className="w-full p-2 border rounded"
            placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ..."
            rows={3}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          ></textarea>
        </div>

        <div className="space-y-1">
          <label className="font-medium flex items-center gap-2">
            <Ruler className="w-5 h-5" /> ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
          </label>
          <input
            type="text"
            className="w-full p-2 border rounded bg-gray-100"
            placeholder="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡πâ"
            value={size}
            readOnly
          />
        </div>

        <Button onClick={handleUpload} className="w-full text-base flex gap-2 items-center justify-center">
          <Upload className="w-5 h-5" /> ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        </Button>

        {statusMsg && <p className="text-center text-sm text-gray-700">{statusMsg}</p>}
      </div>

      <div className="text-center mt-6">
        <Link href="/">
          <Button variant="outline">‚Ü©Ô∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Button>
        </Link>
      </div>
    </div>
  );
}